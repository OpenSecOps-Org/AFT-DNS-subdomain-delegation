AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.12
    Handler: app.lambda_handler
    Timeout: 900

Description:
  Allows you to use AFT (Account Factory for Terraform) to declaratively specify subdomain
  delegations from a central networking account to individual member accounts in a 
  declarative way.

Parameters:
  NetworkingAccountId:
    Type: String
    Description: The name of the account where DNS domains are hosted and for which
      delegation of subdomains should be done.
    Default: "111122223333"   
 
  AFTManagementAccountId:
    Type: String
    Description: The name of the AFT Management account.
    Default: "444455556666"   
 

# ------------------------------------------------------------------------------

Resources:

  ###############################################################################
  #
  # The SNS queue to which AFT sends messages from each member account.
  #
  ###############################################################################

  AFTSubdomainDelegationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: aft-subdomain-delegation-topic

  AFTSubdomainDelegationTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - 
            Sid: CrossAccountAccess
            Effect: Allow
            Principal: 
              AWS: '*'
            Resource: !Ref AFTSubdomainDelegationTopic
            Action: 'sns:Publish'
            Condition: 
              "ArnLike":
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWSAFTExecution"
          - 
            Sid: AllowUse
            Effect: Allow
            Principal: 
              AWS: !Sub '${AWS::AccountId}'
            Resource: !Ref AFTSubdomainDelegationTopic
            Action:
              - sns:Subscribe
              - sns:Receive
              - sns:ListSubscriptionsByTopic
          - 
            Sid: AllowAWSChatbot
            Effect: Allow
            Principal: '*'
            Condition:
              StringLike:
                "aws:PrincipalArn": "arn:aws:iam::*:role/aws-service-role/management.chatbot.amazonaws.com/AWSServiceRoleForAWSChatbot"
            Resource: !Ref AccountCreatedTopic
            Action:
              - sns:Subscribe
              - sns:Receive
      Topics:
        - !Ref AFTSubdomainDelegationTopic


  ###############################################################################
  #
  # The trigger function, listening for SNS messages and starting a Step Function
  # execution for each SNS message received.
  #
  ###############################################################################

  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/trigger/
      Events:
        CalledFromAFTEvent:
          Type: SNS
          Properties:
            Topic: !Ref AFTSubdomainDelegationTopic
            Region: !Sub '${AWS::Region}'
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref DelegateDNSSubdomainsSM
      Policies:
        - Statement:
            - 
              Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - !Ref DelegateDNSSubdomainsSM

  LambdaResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TriggerFunction
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref AFTSubdomainDelegationTopic

  ###############################################################################
  #
  # The Step Functions state machine which performs the actual subdomain 
  # delegation in the member account and in the networking account.
  #
  ###############################################################################

  DelegateDNSSubdomainsSM:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/delegate_dns_subdomains.asl.yaml
      DefinitionSubstitutions:
        NetworkingAccountId: !Sub '${NetworkingAccountId}'
        CollectDomainDataFunctionArn: !GetAtt CollectDomainDataFunction.Arn
        DetermineExtentOfChangesFunctionArn: !GetAtt DetermineExtentOfChangesFunction.Arn
        CreateDelegationFunctionArn: !GetAtt CreateDelegationFunction.Arn
        UpdateDelegationFunctionArn: !GetAtt UpdateDelegationFunction.Arn
        DeleteDelegationFunctionArn: !GetAtt DeleteDelegationFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CollectDomainDataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DetermineExtentOfChangesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateDelegationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateDelegationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteDelegationFunction

  CollectDomainDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/collect_domain_data/
      Policies:
        - Statement:
            - 
              Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: 'arn:aws:iam::*:role/AWSControlTowerExecution'
            - 
              Sid: Route53Permissions
              Effect: Allow
              Action:
                - route53:ListHostedZones
              Resource: '*'

  DetermineExtentOfChangesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/determine_extent_of_changes/

  CreateDelegationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_delegation/
      Policies:
        - Statement:
            - 
              Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: 'arn:aws:iam::*:role/AWSControlTowerExecution'
            - 
              Sid: Route53Permissions
              Effect: Allow
              Action:
                - route53:CreateHostedZone
                - route53:ChangeResourceRecordSets
              Resource: '*'
      Environment:
        Variables:
          NETWORKING_ACCOUNT_ID: !Ref NetworkingAccountId

  UpdateDelegationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update_delegation/
      Policies:
        - Statement:
            - 
              Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: 'arn:aws:iam::*:role/AWSControlTowerExecution'
            - 
              Sid: Route53Permissions
              Effect: Allow
              Action:
                - route53:ChangeResourceRecordSets
                - route53:ListResourceRecordSets
              Resource: '*'
      Environment:
        Variables:
          NETWORKING_ACCOUNT_ID: !Ref NetworkingAccountId

  DeleteDelegationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_delegation/
      Policies:
        - Statement:
            - 
              Sid: AssumeTheRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: 'arn:aws:iam::*:role/AWSControlTowerExecution'
            - 
              Sid: Route53Permissions
              Effect: Allow
              Action:
                - route53:ChangeResourceRecordSets
                - route53:DeleteHostedZone
                - route53:ListResourceRecordSets
              Resource: '*'
      Environment:
        Variables:
          NETWORKING_ACCOUNT_ID: !Ref NetworkingAccountId


  ################################################################################
  #
  # Monitoring. For state machines, only the state machine itself should be
  # monitored as it orchestrates the lambda functions which are expected to fail
  # in certain circumstances without this constituting a processing failure.
  #
  # Lambdas not in state machines should be monitored individually.
  #
  ################################################################################

  DelegateDNSSubdomainsSMAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: INFRA-DelegateDNSSubdomainsSM-Failure-MEDIUM
      AlarmDescription: The state machine DelegateDNSSubdomainsSM failed.
      ActionsEnabled: true
      OKActions: []
      AlarmActions: []
      InsufficientDataActions: []
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref DelegateDNSSubdomainsSM
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  AlarmTriggerFunction:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: INFRA-CreateDelegationTriggerFunction-HIGH
      AlarmDescription: CreateDelegationTriggerFunction failed.
      ActionsEnabled: true
      OKActions: []
      AlarmActions: []
      InsufficientDataActions: []
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref TriggerFunction
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
